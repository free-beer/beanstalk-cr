{"repository_name":"beanstalk-cr","body":"# beanstalk-cr\n\nA Crystal library for interfacing with the Beanstalk queue.\n\n[![GitHub release](https://img.shields.io/github/v/release/free-beer/beanstalk-cr?include_prereleases)](https://github.com/free-beer/beanstalk-cr/releases)\n\n[![Build Status](https://travis-ci.org/free-beer/beanstalk-cr.svg?branch=master)](https://travis-ci.org/free-beer/beanstalk-cr)\n\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://free-beer.github.io/beanstalk-cr/)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     beanstalk-cr:\n       github: free-beer/beanstalk-cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"beanstalk-cr\"\n```\n\nAll code for the library is contained within a module called ```Beanstalk```.\nTo connect to a Beanstalk server instance you can call the ```open()``` method\non the ```Beanstalk::Connection``` class like this...\n\n```crystal\n  connection = Beanstalk::Connection.open()\n```\n\nThis will attempt to connect to a server running on ```localhost``` at the\ndefault Beanstalk port number (11300). If you want to change the server that\ngets connected to you can specify that in the call to ```open()``` like\nthis...\n\n```crystal\n  connection = Beanstalk::Connection.open(\"my.host.name\", 12345)\n```\n\nOnce you have a connection to a Beanstalk instance you can use it to obtain a\n```Tube``` instance. Tubes are used by Beanstalk as a primary interaction\ninterface. There are two primary mechanisms for obtaining a ```Tube``` from a\n```Connection``` and these are shown below...\n\n```crystal\n  tube1 = connection.default_tube\n  tube2 = connection[\"my_q\"]\n```\n\nThe differences between these requires an explanation of the Beanstalk concepts\nof 'using' and 'watching'. These concepts refer to actual queues on the Beanstalk\nserver and how your ```Tube``` instance interacts with them. The queue that a\n```Tube``` is using will be the queue that it inserts content into. A ```Tube```\ncan only be 'using' a single queue. On the other hand, a ```Tube``` can be\n`watching` multiple queues and these are the queues that the ```Tube``` will\ncheck when it's looking to receive content.\n\nIn the code above, using ```connection.default_tube``` will retrieve a ```Tube```\ninstance that is using and watching only the default queues (i.e. the queue\nwith the name 'default'). Using ```connection[\"my_q\"]``` will retrieve a\n```Tube``` that is using and watching a queue called \"my_q\". Note, that if a\nqueue does not exist when you request to use or watch it, Beanstalk will\nautomatically create it.\n\nThe queues that a ```Tube``` instance is using or watching can be changed after\nthe ```Tube``` instance has been obtained using calls like...\n\n```crystal\n  tube.use \"other_q\"\n  tube.watch \"a_third_q\"\n```\n\n### Jobs\n\nBeanstalk refers to the content of it's queues as jobs. In general terms a job\nis a collection of data that has been inserted into a queue or can be retrieved\nfrom a queue. This is modelled in the library with the ```Job``` class. To create\na new ```Job``` you can simply construct it. Once constructed you can add data to\nthe ```Job``` instance. The code below shows some examples of this...\n\n```crystal\n  # Create an empty job.\n  job1 = Beanstalk::Job.new\n\n  # Create a job populated with data from a String.\n  job2 = Beanstalk::Job.new(\"The data content for the job.\")\n\n  # Create a job from an Array(UInt8).\n  array = [1_u8, 2_u8, 3_u8, 4_u8, 5_u8]\n  job3  = new Beanstalk::Job(array)\n\n  # Create a job from a Slice(UInt8)\n  slice = Slice.new(array.to_unsafe, array.size)\n  job4  = new Beanstalk::Job(slice)\n\n  # Create a job from mixed data sources.\n  job5 = new Beanstalk::Job(\"Some text.\", array, slice)\n```\n\nData can be added to an existing ```Job``` instance by calling one of it's\n```append()``` methods. You can check the size of a ```Job``` (i.e. the number of\nbytes of data it contains) by calling the ```size()``` method and fetch the actual\ndata by calling the ```bytes()``` method. A call to the ```to_s()``` method will\nattempt to convert the ```Job``` data to a ```String``` so don't call this unless\nyou're sure that data actually does represent a ```String```.\n\nOnce you have a ```Job``` you can add it to a Beanstalk queue by calling the\n```put()``` method on a ```Tube``` instance. The ```Job``` will be added to the\nqueue that the ```Tube``` is currently set to use. Prior to being added to a\nqueue a ```Job``` instance will have a ```nil``` value for it's ```id```\nattribute. After being added the ```id``` will be updated to match the id value\nassigned to the ```Job``` by Beanstalk. Examples of adding jobs to a Beanstalk\nqueue are shown below...\n\n```crystal\n  tube = Beanstalk::Connection.open.default_tube\n\n  # Adding a job with default settings for priority, delay and TTR.\n  job1 = Beanstalk::Job.new(\"Some content for my first job.\")\n  tube.put(job1)\n\n  # Adding a job with explicit settings for priority, delay and TTR.\n  settings = Beanstalk::Job::Settings.new(0, 120, 600)\n  job2     = Beanstalk::Job.new(\"Some different content for my second job.\")\n  tube.put(job2, settings)\n```\n\nWhen adding a ```Job``` to a queue Beanstalk has three associated concepts called\npriority, delay and time to run (TTR). Priority is a mechanism saying something\nabout the relative importance of different jobs, with lower priority settings being\nconsidered more important and therefore getting delivered sooner. A jobs delay\nsetting indicates to Beanstalk that it should hold off on making the job available\nfor retrieval for a specific number of seconds. Finally a jobs TTR indicates how\nmuch time a client has (in seconds) to do something with a job before Beanstalk will\nrelease their hold on the job and make it available for retrieval again.\n\nAnother way to obtain a ```Job``` instance is to retrieve one from the Beanstalk\nserver. The primary mechanism for doing this is referred to by Beanstalk as\n'reserving' the job. When you reserve a job from Beanstalk you are taking\ntemporary ownership of the job. At some future point it is expected that you\nwill either delete the job, release ownership of it or 'bury' it. The TTR setting\nfor a job when it is created indicates how long (in seconds) you have to act on\na job before the Beanstalk server will return it to the population of jobs that\nare available to be reserved. Examples of fetching jobs from Beanstalk are shown\nbelow...\n\n```crystal\n  # Returns immediately with either a Job instance or nil.\n  job1 = tube.reserve?\n\n  # Waits a most the specified time span for a job to become available or\n  # returns nil if the time expires and a job is not available.\n  job2 = tube.reserve(Time::Span.new(seconds: 10))\n\n  # Block until a job becomes available.\n  job3 = tube.reserve\n```\n\nOnce you have a ```Job``` instance you can perform whatever associating processing\nthat you want. Once this is finished you must do something to indicate to the\nBeanstalk server that you are finished with the ```Job```. To do any of these things\nyou must have already have reserved the ```Job``` and the TTR for the ```Job``` must\nnot have expired. Examples of what you can do include...\n\n```crystal\n  # Delete the job from the Beanstalk queue.\n  tube.delete(job)\n\n  # Release the job back to Beanstalk so that it can be reserved again.\n  tube.release(job)\n\n  # Release the job giving it different priority and delay settings.\n  settings = Beanstalk::Job::Settings.new(250, 600)\n  tube.release(job, settings)\n\n  # Touch the job, resetting the TTR for your reservation.\n  tube.touch(job)\n\n  # Bury the job (i.e. make it unavailable for reservation until it is 'kicked' back\n  # into the ready pool).\n  tube.bury(job)\n```\n\nThis covers the primary usage for the library. There are other capabilities provided\nby the library but you should consult the API documentation for further details.\n\n### Environment Settings\n\nThe library takes note of a number of enviroment settings that can alter how it operates\nwhen these are set. These are detailed below...\n\n**BEANSTALK_CONNECT_TIMEOUT** - Is used to set the time out on obtaining an initial\nconnection to a Beanstalk server. Defaults to 10 seconds and should be an integer value.\n\n**BEANSTALK_DEFAULT_JOB_DELAY** - Is used to set the default delay assigned to jobs added\nto Beanstalk without an explicit delay. Default to zero and should be an integer value.\n\n**BEANSTALK_DEFAULT_JOB_PRIORITY** - Is used to set the default priority assigned to jobs\nadded to Beanstalk without an explicit priority. Defaults to 1000 and should be an integer\nvalue.\n\n**BEANSTALK_DEFAULT_JOB_TTR** - Is used to set the default time to run assigned to jobs\nadded to Beanstsalk without an explicit TTR. Defaults to 3600 (1 hour) and should be an\ninteger value (in seconds).\n\n**BEANSTALK_READ_BUFFER_SIZE** - Is used to set the buffer sized for reading Beanstalk\nmessages from the server. Might be useful to bump in size if you're using very large\njobs but probably not. Should be an integer value.\n\n## Development\n\nCode is freely available, so familiarize yourself with that. Note that the unit tests\nrequire an actual instance of Beanstalk to run and assume that they will be using an\ninstance on localhost at the default port number.\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/beanstalk-cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\nPull requests will be reviewed as soon as is possible, though no timeline is\nguaranteed. Ultimate decision on whether a PR gets merged or not remains my\nperogative.\n\n## Contributors\n\n- [Peter Wood](https://github.com/free-beer) - creator and maintainer\n","program":{"html_id":"beanstalk-cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"beanstalk-cr","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"beanstalk-cr/Beanstalk","path":"Beanstalk.html","kind":"module","full_name":"Beanstalk","name":"Beanstalk","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(\"beanstalk-cr\")","doc":"Library logger.","summary":"<p>Library logger.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.2.3\"","doc":"Version constant.","summary":"<p>Version constant.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"TODO: Write documentation for `Beanstalk::Cr`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code>Beanstalk::Cr</code></p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"beanstalk-cr/Beanstalk/Connection","path":"Beanstalk/Connection.html","kind":"class","full_name":"Beanstalk::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEFAULT_BUFFER_SIZE","name":"DEFAULT_BUFFER_SIZE","value":"\"2048\"","doc":"A constant for the default buffer size to be used when reading data from the\nBeanstalk server (in bytes).","summary":"<p>A constant for the default buffer size to be used when reading data from the Beanstalk server (in bytes).</p>"},{"id":"DEFAULT_CONNECT_TIMEOUT","name":"DEFAULT_CONNECT_TIMEOUT","value":"\"10\"","doc":"Constant for the default socket connect time out setting. This value can be\noverridden using the BEANSTALK_CR_CONNECT_TIMEOUT environment setting.","summary":"<p>Constant for the default socket connect time out setting.</p>"},{"id":"DEFAULT_HOST","name":"DEFAULT_HOST","value":"\"localhost\"","doc":"A constant for the default host name.","summary":"<p>A constant for the default host name.</p>"},{"id":"DEFAULT_READ_WAIT_TIME","name":"DEFAULT_READ_WAIT_TIME","value":"\"10000\"","doc":"Constant for the default read wait time (in milliseconds).","summary":"<p>Constant for the default read wait time (in milliseconds).</p>"},{"id":"LINE_ENDING","name":"LINE_ENDING","value":"[13_u8, 10_u8]","doc":"Constant for the line ending used by Beanstalk commands.","summary":"<p>Constant for the line ending used by Beanstalk commands.</p>"},{"id":"STATS_BUFFER_SIZE","name":"STATS_BUFFER_SIZE","value":"4096","doc":"Constant for the stats job buffer size.","summary":"<p>Constant for the stats job buffer size.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk","kind":"module","full_name":"Beanstalk","name":"Beanstalk"},"doc":"This class encapsulates a connection to a Beanstalk instance. Note that\nthis class is not thread safe and instances of it should not be shared.","summary":"<p>This class encapsulates a connection to a Beanstalk instance.</p>","class_methods":[{"id":"buffer_size-class-method","html_id":"buffer_size-class-method","name":"buffer_size","doc":"Returns the size of the read buffer to be used when fetching data from\nthe server. This value is determined from an environment variable setting\nwith a fall back to a default.","summary":"<p>Returns the size of the read buffer to be used when fetching data from the server.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":226,"url":null},"def":{"name":"buffer_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(ENV.fetch(\"BEANSTALK_READ_BUFFER_SIZE\", DEFAULT_BUFFER_SIZE)).to_i"}},{"id":"open(host:String,port=Server::DEFAULT_PORT)-class-method","html_id":"open(host:String,port=Server::DEFAULT_PORT)-class-method","name":"open","doc":"This method creates a Connection object and attempts to connect it to\na Beanstalk server instance.","summary":"<p>This method creates a Connection object and attempts to connect it to a Beanstalk server instance.</p>","abstract":false,"args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":"String"},{"name":"port","doc":null,"default_value":"Server::DEFAULT_PORT","external_name":"port","restriction":""}],"args_string":"(host : String, port = <span class=\"t\">Server</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PORT</span>)","args_html":"(host : String, port = <span class=\"t\">Server</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PORT</span>)","location":{"filename":"src/beanstalk/connection.cr","line_number":250,"url":null},"def":{"name":"open","args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":"String"},{"name":"port","doc":null,"default_value":"Server::DEFAULT_PORT","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.open(Server.new(host, port))"}},{"id":"open-class-method","html_id":"open-class-method","name":"open","doc":"This method creates a Connection object connecting to Beanstalk on\nlocalhost and using the default port.","summary":"<p>This method creates a Connection object connecting to Beanstalk on localhost and using the default port.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":232,"url":null},"def":{"name":"open","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.open(Server.new(DEFAULT_HOST))"}}],"constructors":[{"id":"open(server:Server):Connection-class-method","html_id":"open(server:Server):Connection-class-method","name":"open","doc":"This method creates a Connection object and attempts to connect it to\na Beanstalk server instance.","summary":"<p>This method creates a Connection object and attempts to connect it to a Beanstalk server instance.</p>","abstract":false,"args":[{"name":"server","doc":null,"default_value":"","external_name":"server","restriction":"Server"}],"args_string":"(server : Server) : Connection","args_html":"(server : <a href=\"../Beanstalk/Server.html\">Server</a>) : <a href=\"../Beanstalk/Connection.html\">Connection</a>","location":{"filename":"src/beanstalk/connection.cr","line_number":238,"url":null},"def":{"name":"open","args":[{"name":"server","doc":null,"default_value":"","external_name":"server","restriction":"Server"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Connection","visibility":"Public","body":"begin\n  Log.debug do\n    \"Establishing a connection to Beanstalk at #{server.host}:#{server.port}.\"\n  end\n  instance = self.new(server)\n  instance.connect\n  instance\nrescue error\n  Log.error do\n    \"Error connecting to Beanstalk server. Cause: #{error}\\n#{error.backtrace.join(\"\\n\")}\"\n  end\n  raise(Beanstalk::Exception.new(\"Error connecting to Beanstalk server. Cause: #{error}\"))\nend"}}],"instance_methods":[{"id":"[](name:String)-instance-method","html_id":"[](name:String)-instance-method","name":"[]","doc":"Retrieves a tube with a given name (i.e. a tube that is set to use and\nwatch the named queue).","summary":"<p>Retrieves a tube with a given name (i.e.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/beanstalk/connection.cr","line_number":219,"url":null},"def":{"name":"[]","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tube.new(self, name)"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Terminates the connection to the Beanstalk server.","summary":"<p>Terminates the connection to the Beanstalk server.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":52,"url":null},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Closing connection to the #{@server.to_s} Beanstalk server.\"\nend\nif open?\n  @socket.close\nend\n"}},{"id":"closed?-instance-method","html_id":"closed?-instance-method","name":"closed?","doc":"Used to check if the connection is closed.","summary":"<p>Used to check if the connection is closed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":58,"url":null},"def":{"name":"closed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!open?"}},{"id":"default_tube-instance-method","html_id":"default_tube-instance-method","name":"default_tube","doc":"Fetches the default tube for a Connection (i.e. a tube using and watching\nthe default queue).","summary":"<p>Fetches the default tube for a Connection (i.e.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":64,"url":null},"def":{"name":"default_tube","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tube.new(self)"}},{"id":"open?-instance-method","html_id":"open?-instance-method","name":"open?","doc":"Used to check if the connection is open.","summary":"<p>Used to check if the connection is open.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":69,"url":null},"def":{"name":"open?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(!@socket.nil?) && (!@socket.closed?)"}},{"id":"receive-instance-method","html_id":"receive-instance-method","name":"receive","doc":"Attempts to retrieve data from the Beanstalk server.","summary":"<p>Attempts to retrieve data from the Beanstalk server.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":74,"url":null},"def":{"name":"receive","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  Log.debug do\n    \"Receiving non-job data from the server.\"\n  end\n  data = Array(UInt8).new\n  slice = Slice.new(Connection.buffer_size, 0_u8)\n  done = false\n  total = 0\n  while !done\n    read_size = 0\n    read_size = @socket.read(slice)\n    data.concat(slice.to_a[0, read_size])\n    done = (read_size < slice.size)\n  end\n  Log.debug do\n    \"Generating result buffer of #{data.size} bytes.\"\n  end\n  Slice.new(data.to_unsafe, data.size, read_only: true)\nrescue error\n  Log.error do\n    \"Exception caught receiving data from the server.\\nCause: #{error}\\n#{error.backtrace.join(\"\\n\")}\"\n  end\n  raise(Beanstalk::Exception.new(\"Error receiving data from the Beanstalk server. Cause: #{error}\"))\nend"}},{"id":"receive_job-instance-method","html_id":"receive_job-instance-method","name":"receive_job","doc":"Attempts to retrieve the data for a job from the Beanstalk server. This\nis a specialized method as retrieving job data is really the only variable\nfetch from the Beanstalk server.","summary":"<p>Attempts to retrieve the data for a job from the Beanstalk server.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":100,"url":null},"def":{"name":"receive_job","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  Log.debug do\n    \"Receiving job data from the server.\"\n  end\n  data = Array(UInt8).new\n  slice = Slice.new(Connection.buffer_size, 0_u8)\n  read_size = 0\n  begin\n    read_size = @socket.read(slice)\n  rescue error : IO::TimeoutError\n    Log.debug do\n      \"Socket read timed out, assuming no more to be read.\"\n    end\n    read_size = 0\n  end\n  Log.debug do\n    \"Read in #{read_size} bytes from the server.\"\n  end\n  if read_size == slice.size\n    offset = 0\n    while (slice[offset].unsafe_chr != '\\r') && offset < slice.size\n      offset = offset + 1\n    end\n    _, _, job_size = (String.new(slice[0, offset])).split(\" \")\n    job_size = job_size.to_i32\n    available = slice.size - (offset + 2)\n    if available < (job_size + 2)\n      remaining = (job_size - available) + 2\n      data.concat(slice.to_a[0, slice.size])\n      while remaining > 0\n        begin\n          read_size = @socket.read(slice)\n        rescue error : IO::TimeoutError\n          Log.debug do\n            \"Socket read timed out, assuming no more to be read.\"\n          end\n          read_size = 0\n        end\n        Log.debug do\n          \"Read in a further #{read_size} bytes from the server.\"\n        end\n        data.concat(slice.to_a[0, read_size])\n        remaining = remaining - read_size\n      end\n    else\n      data.concat(slice.to_a[0, read_size])\n    end\n  else\n    data.concat(slice.to_a[0, read_size])\n  end\n  Log.debug do\n    \"Generating result buffer of #{data.size} bytes.\"\n  end\n  Slice.new(data.to_unsafe, data.size, read_only: true)\nrescue error\n  Log.error do\n    \"Exception caught receiving data from the server.\\nCause: #{error}\\n#{error.backtrace.join(\"\\n\")}\"\n  end\n  raise(Beanstalk::Exception.new(\"Error receiving data from the Beanstalk server. Cause: #{error}\"))\nend"}},{"id":"receive_stats-instance-method","html_id":"receive_stats-instance-method","name":"receive_stats","doc":"A method intended to fetch the response for a stats-job request.","summary":"<p>A method intended to fetch the response for a stats-job request.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":157,"url":null},"def":{"name":"receive_stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Receiving job data from the server.\"\nend\ndata = Array(UInt8).new\nslice = Slice.new(STATS_BUFFER_SIZE, 0_u8)\nread_size = 0\nbegin\n  read_size = @socket.read(slice)\nrescue error : IO::TimeoutError\n  Log.debug do\n    \"Socket read timed out, assuming no more to be read.\"\n  end\n  read_size = 0\nend\nif read_size == 0\n  raise(Beanstalk::Exception.new(\"Fetch of stats data from the Beanstalk server was unsuccessful.\"))\nend\nresponse = String.new(slice[0, read_size])\nLog.debug do\n  \"Stats Response:\\n#{response}\"\nend\nif !(response.starts_with?(\"OK\"))\n  Log.error do\n    \"Error fetching stats data from the Beanstalk server. Response:\\n#{response}\"\n  end\n  raise(Beanstalk::Exception.new(\"Error fetching stats data from the Beanstalk server.\"))\nend\nlines = response.lines\nYAML.parse(lines[1, lines.size - 1].join(\"\\n\"))\n"}},{"id":"send(data:Slice(UInt8)?,*parameters)-instance-method","html_id":"send(data:Slice(UInt8)?,*parameters)-instance-method","name":"send","doc":"Dispatches a message to the Beanstalk server via the socket connection in\nthe appropriate format.","summary":"<p>Dispatches a message to the Beanstalk server via the socket connection in the appropriate format.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Slice(UInt8) | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":""}],"args_string":"(data : Slice(UInt8)?, *parameters)","args_html":"(data : Slice(UInt8)?, *parameters)","location":{"filename":"src/beanstalk/connection.cr","line_number":185,"url":null},"def":{"name":"send","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Slice(UInt8) | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !open?\n  raise(Beanstalk::Exception.new(\"Write called on closed Beanstalk connection.\"))\nend\nmessage = Array(UInt8).new\nparameters.each do |parameter|\n  if message.size > 0\n    message << 32_u8\n  end\n  message.concat(parameter.to_s.to_slice)\nend\nmessage.concat(LINE_ENDING)\nif (!data.nil?) && data.size > 0\n  message.concat(data.to_a)\n  message.concat(LINE_ENDING)\nend\nLog.debug do\n  \"Message to server contains #{message.size} bytes of data. Contents...\\n#{message.to_s}\"\nend\n@socket.write(Slice.new(message.to_unsafe, message.size, read_only: true))\n@socket.flush\n"}},{"id":"server:Beanstalk::Server-instance-method","html_id":"server:Beanstalk::Server-instance-method","name":"server","doc":"Fetches details of the server associated with a Connection instance.","summary":"<p>Fetches details of the server associated with a Connection instance.</p>","abstract":false,"args":[],"args_string":" : Beanstalk::Server","args_html":" : <a href=\"../Beanstalk/Server.html\">Beanstalk::Server</a>","location":{"filename":"src/beanstalk/connection.cr","line_number":33,"url":null},"def":{"name":"server","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@server"}},{"id":"socket:Socket-instance-method","html_id":"socket:Socket-instance-method","name":"socket","doc":"Fetches the socket for a Connection object. Should generally not be accessed directly.","summary":"<p>Fetches the socket for a Connection object.</p>","abstract":false,"args":[],"args_string":" : Socket","args_html":" : Socket","location":{"filename":"src/beanstalk/connection.cr","line_number":36,"url":null},"def":{"name":"socket","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket"}},{"id":"stats-instance-method","html_id":"stats-instance-method","name":"stats","doc":"Fetches stats for the server attached to a connection.","summary":"<p>Fetches stats for the server attached to a connection.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/connection.cr","line_number":205,"url":null},"def":{"name":"stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Requesting server stats for the #{@server.to_s} server.\"\nend\nsend(nil, \"stats\")\nreceive_stats()\n"}}],"macros":[],"types":[]},{"html_id":"beanstalk-cr/Beanstalk/Exception","path":"Beanstalk/Exception.html","kind":"class","full_name":"Beanstalk::Exception","name":"Exception","abstract":false,"superclass":{"html_id":"beanstalk-cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"beanstalk-cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk","kind":"module","full_name":"Beanstalk","name":"Beanstalk"},"doc":"This is the base exception class used for errors within the beanstalk-cr\nlibrary.","summary":"<p>This is the base exception class used for errors within the beanstalk-cr library.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"beanstalk-cr/Beanstalk/Job","path":"Beanstalk/Job.html","kind":"class","full_name":"Beanstalk::Job","name":"Job","abstract":false,"superclass":{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk","kind":"module","full_name":"Beanstalk","name":"Beanstalk"},"doc":"This class represents a job within Beanstalk.","summary":"<p>This class represents a job within Beanstalk.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Constructor.","summary":"<p>Constructor.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":69,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(*entries)-class-method","html_id":"new(*entries)-class-method","name":"new","doc":"Constructor that takes a collection of data elements and appends them to\nthe job. Note that entries must be of type Array(UInt8) or String.","summary":"<p>Constructor that takes a collection of data elements and appends them to the job.</p>","abstract":false,"args":[{"name":"entries","doc":null,"default_value":"","external_name":"entries","restriction":""}],"args_string":"(*entries)","args_html":"(*entries)","location":{"filename":"src/beanstalk/job.cr","line_number":75,"url":null},"def":{"name":"new","args":[{"name":"entries","doc":null,"default_value":"","external_name":"entries","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*entries)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"append(data:Array(UInt8))-instance-method","html_id":"append(data:Array(UInt8))-instance-method","name":"append","doc":"This method writes data into the job.","summary":"<p>This method writes data into the job.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(UInt8)"}],"args_string":"(data : Array(UInt8))","args_html":"(data : Array(UInt8))","location":{"filename":"src/beanstalk/job.cr","line_number":81,"url":null},"def":{"name":"append","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.concat(data)"}},{"id":"append(data:Slice(UInt8))-instance-method","html_id":"append(data:Slice(UInt8))-instance-method","name":"append","doc":"This method writes data into the job.","summary":"<p>This method writes data into the job.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Slice(UInt8)"}],"args_string":"(data : Slice(UInt8))","args_html":"(data : Slice(UInt8))","location":{"filename":"src/beanstalk/job.cr","line_number":86,"url":null},"def":{"name":"append","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Slice(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append(data.to_a)"}},{"id":"append(text:String)-instance-method","html_id":"append(text:String)-instance-method","name":"append","doc":"Appends the content of a String to the Job data.","summary":"<p>Appends the content of a String to the Job data.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/beanstalk/job.cr","line_number":91,"url":null},"def":{"name":"append","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append(text.bytes)"}},{"id":"bytes-instance-method","html_id":"bytes-instance-method","name":"bytes","doc":"Fetches a slice of the data bytes within the Job.","summary":"<p>Fetches a slice of the data bytes within the Job.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":96,"url":null},"def":{"name":"bytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Slice.new(@data.to_unsafe, @data.size, read_only: true)"}},{"id":"id:Int64?-instance-method","html_id":"id:Int64?-instance-method","name":"id","doc":"Property for the job identifier. This will only be non-nil for jobs that\nhave actually been inserted into Beanstalk.","summary":"<p>Property for the job identifier.</p>","abstract":false,"args":[],"args_string":" : Int64?","args_html":" : Int64?","location":{"filename":"src/beanstalk/job.cr","line_number":66,"url":null},"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(id)-instance-method","html_id":"id=(id)-instance-method","name":"id=","doc":"Property for the job identifier. This will only be non-nil for jobs that\nhave actually been inserted into Beanstalk.","summary":"<p>Property for the job identifier.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id)","args_html":"(id)","location":{"filename":"src/beanstalk/job.cr","line_number":66,"url":null},"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = id"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Fetches the size, in bytes, of the data currently held within the Job.    ","summary":"<p>Fetches the size, in bytes, of the data currently held within the Job.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":101,"url":null},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.size"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Interprets the current data contents of a job as a string which is\nreturned from the  method call.","summary":"<p>Interprets the current data contents of a job as a string which is returned from the  method call.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":107,"url":null},"def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.size > 0 ? String.new(bytes) : \"\""}}],"macros":[],"types":[{"html_id":"beanstalk-cr/Beanstalk/Job/Settings","path":"Beanstalk/Job/Settings.html","kind":"struct","full_name":"Beanstalk::Job::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"beanstalk-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"beanstalk-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"beanstalk-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEFAULT_DELAY","name":"DEFAULT_DELAY","value":"0_u32","doc":"Constant for the default delay setting.","summary":"<p>Constant for the default delay setting.</p>"},{"id":"DEFAULT_PRIORITY","name":"DEFAULT_PRIORITY","value":"1000_u32","doc":"Constant for the default priority setting.","summary":"<p>Constant for the default priority setting.</p>"},{"id":"DEFAULT_TIME_TO_RUN","name":"DEFAULT_TIME_TO_RUN","value":"3600_u32","doc":"Constant for the default time to run setting (in seconds).","summary":"<p>Constant for the default time to run setting (in seconds).</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk/Job","kind":"class","full_name":"Beanstalk::Job","name":"Job"},"doc":"This structure is used to encapsulate the concepts of priority, delay and\ntime to run which are associated with a job when it is put or released to\nBeanstalk.","summary":"<p>This structure is used to encapsulate the concepts of priority, delay and time to run which are associated with a job when it is put or released to Beanstalk.</p>","class_methods":[{"id":"default_delay-class-method","html_id":"default_delay-class-method","name":"default_delay","doc":"Generates a delay setting based on either an environment variable or\na constant.","summary":"<p>Generates a delay setting based on either an environment variable or a constant.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":42,"url":null},"def":{"name":"default_delay","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(ENV.fetch(\"BEANSTALK_DEFAULT_JOB_DELAY\", \"#{DEFAULT_DELAY}\")).to_u32"}},{"id":"default_priority-class-method","html_id":"default_priority-class-method","name":"default_priority","doc":"Generates a priority setting based on either an environment variable or\na constant.","summary":"<p>Generates a priority setting based on either an environment variable or a constant.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":48,"url":null},"def":{"name":"default_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(ENV.fetch(\"BEANSTALK_DEFAULT_JOB_PRIORITY\", \"#{DEFAULT_PRIORITY}\")).to_u32"}},{"id":"default_time_to_run-class-method","html_id":"default_time_to_run-class-method","name":"default_time_to_run","doc":"Generates a time to run setting based on either an environment variable or\na constant.","summary":"<p>Generates a time to run setting based on either an environment variable or a constant.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":54,"url":null},"def":{"name":"default_time_to_run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(ENV.fetch(\"BEANSTALK_DEFAULT_JOB_TTR\", \"#{DEFAULT_TIME_TO_RUN}\")).to_u32"}}],"constructors":[{"id":"new(priority:UInt32,delay:UInt32=DEFAULT_DELAY,time_to_run:UInt32=DEFAULT_TIME_TO_RUN)-class-method","html_id":"new(priority:UInt32,delay:UInt32=DEFAULT_DELAY,time_to_run:UInt32=DEFAULT_TIME_TO_RUN)-class-method","name":"new","doc":"Explicit constructor.","summary":"<p>Explicit constructor.</p>","abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"UInt32"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":"UInt32"},{"name":"time_to_run","doc":null,"default_value":"DEFAULT_TIME_TO_RUN","external_name":"time_to_run","restriction":"UInt32"}],"args_string":"(priority : UInt32, delay : UInt32 = <span class=\"t\">DEFAULT_DELAY</span>, time_to_run : UInt32 = <span class=\"t\">DEFAULT_TIME_TO_RUN</span>)","args_html":"(priority : UInt32, delay : UInt32 = <span class=\"t\">DEFAULT_DELAY</span>, time_to_run : UInt32 = <span class=\"t\">DEFAULT_TIME_TO_RUN</span>)","location":{"filename":"src/beanstalk/job.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"UInt32"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":"UInt32"},{"name":"time_to_run","doc":null,"default_value":"DEFAULT_TIME_TO_RUN","external_name":"time_to_run","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(priority, delay, time_to_run)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Default constructor that creates an instance with default values for the\nsettings.","summary":"<p>Default constructor that creates an instance with default values for the settings.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/job.cr","line_number":30,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"delay:UInt32-instance-method","html_id":"delay:UInt32-instance-method","name":"delay","doc":"Accessor for the delay setting.","summary":"<p>Accessor for the delay setting.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/beanstalk/job.cr","line_number":20,"url":null},"def":{"name":"delay","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@delay"}},{"id":"delay=(delay)-instance-method","html_id":"delay=(delay)-instance-method","name":"delay=","doc":"Accessor for the delay setting.","summary":"<p>Accessor for the delay setting.</p>","abstract":false,"args":[{"name":"delay","doc":null,"default_value":"","external_name":"delay","restriction":""}],"args_string":"(delay)","args_html":"(delay)","location":{"filename":"src/beanstalk/job.cr","line_number":20,"url":null},"def":{"name":"delay=","args":[{"name":"delay","doc":null,"default_value":"","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@delay = delay"}},{"id":"priority:UInt32-instance-method","html_id":"priority:UInt32-instance-method","name":"priority","doc":"Accessor for the priority setting.","summary":"<p>Accessor for the priority setting.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/beanstalk/job.cr","line_number":23,"url":null},"def":{"name":"priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@priority"}},{"id":"priority=(priority)-instance-method","html_id":"priority=(priority)-instance-method","name":"priority=","doc":"Accessor for the priority setting.","summary":"<p>Accessor for the priority setting.</p>","abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":""}],"args_string":"(priority)","args_html":"(priority)","location":{"filename":"src/beanstalk/job.cr","line_number":23,"url":null},"def":{"name":"priority=","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@priority = priority"}},{"id":"time_to_run:UInt32-instance-method","html_id":"time_to_run:UInt32-instance-method","name":"time_to_run","doc":"Accessor for the time_to_run setting.","summary":"<p>Accessor for the time_to_run setting.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/beanstalk/job.cr","line_number":26,"url":null},"def":{"name":"time_to_run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@time_to_run"}},{"id":"time_to_run=(time_to_run)-instance-method","html_id":"time_to_run=(time_to_run)-instance-method","name":"time_to_run=","doc":"Accessor for the time_to_run setting.","summary":"<p>Accessor for the time_to_run setting.</p>","abstract":false,"args":[{"name":"time_to_run","doc":null,"default_value":"","external_name":"time_to_run","restriction":""}],"args_string":"(time_to_run)","args_html":"(time_to_run)","location":{"filename":"src/beanstalk/job.cr","line_number":26,"url":null},"def":{"name":"time_to_run=","args":[{"name":"time_to_run","doc":null,"default_value":"","external_name":"time_to_run","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@time_to_run = time_to_run"}}],"macros":[],"types":[]}]},{"html_id":"beanstalk-cr/Beanstalk/Server","path":"Beanstalk/Server.html","kind":"class","full_name":"Beanstalk::Server","name":"Server","abstract":false,"superclass":{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEFAULT_PORT","name":"DEFAULT_PORT","value":"11300","doc":"Constant for the default Beanstalk port number.","summary":"<p>Constant for the default Beanstalk port number.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk","kind":"module","full_name":"Beanstalk","name":"Beanstalk"},"doc":"This class represents a single server instance running the Beanstalk queue.","summary":"<p>This class represents a single server instance running the Beanstalk queue.</p>","class_methods":[{"id":"for(details:String)-class-method","html_id":"for(details:String)-class-method","name":"for","doc":"Class method that converts a String in the form \"host:port\" into a Server\ninstance. The port part of the string is optional.","summary":"<p>Class method that converts a String in the form \"host:port\" into a Server instance.</p>","abstract":false,"args":[{"name":"details","doc":null,"default_value":"","external_name":"details","restriction":"String"}],"args_string":"(details : String)","args_html":"(details : String)","location":{"filename":"src/beanstalk/server.cr","line_number":29,"url":null},"def":{"name":"for","args":[{"name":"details","doc":null,"default_value":"","external_name":"details","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parts = (details.split(\":\")).map do |e|\n  e.strip\nend\nhost = parts[0]\nport = (parts.size > 1 ? parts[1].to_i : DEFAULT_PORT)\nServer.new(host, port)\n"}}],"constructors":[{"id":"new(host,port=DEFAULT_PORT)-class-method","html_id":"new(host,port=DEFAULT_PORT)-class-method","name":"new","doc":"Constructor.","summary":"<p>Constructor.</p>","abstract":false,"args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"DEFAULT_PORT","external_name":"port","restriction":""}],"args_string":"(host, port = <span class=\"t\">DEFAULT_PORT</span>)","args_html":"(host, port = <span class=\"t\">DEFAULT_PORT</span>)","location":{"filename":"src/beanstalk/server.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"DEFAULT_PORT","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(host, port)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"host:String-instance-method","html_id":"host:String-instance-method","name":"host","doc":"Fetches the host name/IP address for the server.","summary":"<p>Fetches the host name/IP address for the server.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/beanstalk/server.cr","line_number":11,"url":null},"def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@host"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":"Fetches the port number for the server.","summary":"<p>Fetches the port number for the server.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/beanstalk/server.cr","line_number":14,"url":null},"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@port"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Generates a string for a Server.","summary":"<p>Generates a string for a Server.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/server.cr","line_number":23,"url":null},"def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{host}:#{port}\""}}],"macros":[],"types":[]},{"html_id":"beanstalk-cr/Beanstalk/Tube","path":"Beanstalk/Tube.html","kind":"class","full_name":"Beanstalk::Tube","name":"Tube","abstract":false,"superclass":{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"beanstalk-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEFAULT_QUEUE_NAME","name":"DEFAULT_QUEUE_NAME","value":"\"default\"","doc":"Constant for the default tube name.","summary":"<p>Constant for the default tube name.</p>"},{"id":"MAX_NAME_LEN","name":"MAX_NAME_LEN","value":"200","doc":"Constant for the maximum tube name length.","summary":"<p>Constant for the maximum tube name length.</p>"},{"id":"VALID_NAME_PATTERN","name":"VALID_NAME_PATTERN","value":"/^[A-Za-z0-9_\\-\\+;\\$\\/\\.\\(\\)]{1,200}$/","doc":"A constant for the valid name pattern.","summary":"<p>A constant for the valid name pattern.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk","kind":"module","full_name":"Beanstalk","name":"Beanstalk"},"doc":"This class represents a Beanstalk tube.","summary":"<p>This class represents a Beanstalk tube.</p>","class_methods":[{"id":"valid_tube_name?(name:String)-class-method","html_id":"valid_tube_name?(name:String)-class-method","name":"valid_tube_name?","doc":"A method to check whether a given string is a valid tube name.","summary":"<p>A method to check whether a given string is a valid tube name.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/beanstalk/tube.cr","line_number":386,"url":null},"def":{"name":"valid_tube_name?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(VALID_NAME_PATTERN.matches?(name)) && (!(name.starts_with?(\"-\")))"}}],"constructors":[{"id":"new(connection:Connection,name:String=DEFAULT_QUEUE_NAME)-class-method","html_id":"new(connection:Connection,name:String=DEFAULT_QUEUE_NAME)-class-method","name":"new","doc":"Constructor. Preferrably you should simple obtain your Tube instances\nfrom a Connection instance rather than direct instantiating them.\nCreates a Tube object set to use and watch the queue name passed in.\nIf the queue name differs from the default then the Tube created will\nstill be watching the default queue too.","summary":"<p>Constructor.</p>","abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"},{"name":"name","doc":null,"default_value":"DEFAULT_QUEUE_NAME","external_name":"name","restriction":"String"}],"args_string":"(connection : Connection, name : String = <span class=\"t\">DEFAULT_QUEUE_NAME</span>)","args_html":"(connection : <a href=\"../Beanstalk/Connection.html\">Connection</a>, name : String = <span class=\"t\">DEFAULT_QUEUE_NAME</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"},{"name":"name","doc":null,"default_value":"DEFAULT_QUEUE_NAME","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(connection, name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bury(job:Job,priority:UInt32=Job::Settings::DEFAULT_PRIORITY)-instance-method","html_id":"bury(job:Job,priority:UInt32=Job::Settings::DEFAULT_PRIORITY)-instance-method","name":"bury","doc":"Buries the specified job. Buried jobs are not part of the ready jobs\nlist and therefore cannot be reserved. To unbury a job kick it.","summary":"<p>Buries the specified job.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"priority","doc":null,"default_value":"Job::Settings::DEFAULT_PRIORITY","external_name":"priority","restriction":"UInt32"}],"args_string":"(job : Job, priority : UInt32 = <span class=\"t\">Job</span><span class=\"t\">::</span><span class=\"t\">Settings</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PRIORITY</span>)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>, priority : UInt32 = <span class=\"t\">Job</span><span class=\"t\">::</span><span class=\"t\">Settings</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PRIORITY</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":67,"url":null},"def":{"name":"bury","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"priority","doc":null,"default_value":"Job::Settings::DEFAULT_PRIORITY","external_name":"priority","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if job.id.nil?\n  raise(Beanstalk::Exception.new(\"Job has no id and therefore cannot be buried.\"))\nend\nbury(job.id, priority)\n"}},{"id":"bury(job_id,priority:UInt32=Job::Settings::DEFAULT_PRIORITY)-instance-method","html_id":"bury(job_id,priority:UInt32=Job::Settings::DEFAULT_PRIORITY)-instance-method","name":"bury","doc":"Buries the job by its id. Buried jobs are not part of the ready jobs\nlist and therefore cannot be reserved. To unbury a job kick it.","summary":"<p>Buries the job by its id.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""},{"name":"priority","doc":null,"default_value":"Job::Settings::DEFAULT_PRIORITY","external_name":"priority","restriction":"UInt32"}],"args_string":"(job_id, priority : UInt32 = <span class=\"t\">Job</span><span class=\"t\">::</span><span class=\"t\">Settings</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PRIORITY</span>)","args_html":"(job_id, priority : UInt32 = <span class=\"t\">Job</span><span class=\"t\">::</span><span class=\"t\">Settings</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_PRIORITY</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":54,"url":null},"def":{"name":"bury","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""},{"name":"priority","doc":null,"default_value":"Job::Settings::DEFAULT_PRIORITY","external_name":"priority","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Requesting that job id #{job_id} be buried with a priority of #{priority}.\"\nend\nconnection.send(nil, \"bury\", job_id, priority)\nresponse = String.new(connection.receive)\nif !(response.starts_with?(\"BURIED\"))\n  Log.error do\n    \"Failed to bury job id #{job_id}. Response: #{response}\"\n  end\n  raise(Beanstalk::Exception.new(\"Failed to bury job id #{job_id}.\"))\nend\ntrue\n"}},{"id":"connection:Beanstalk::Connection-instance-method","html_id":"connection:Beanstalk::Connection-instance-method","name":"connection","doc":"Retrieves the connection associated with the Tube.","summary":"<p>Retrieves the connection associated with the Tube.</p>","abstract":false,"args":[],"args_string":" : Beanstalk::Connection","args_html":" : <a href=\"../Beanstalk/Connection.html\">Beanstalk::Connection</a>","location":{"filename":"src/beanstalk/tube.cr","line_number":24,"url":null},"def":{"name":"connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection"}},{"id":"delete(job_id:Int64?)-instance-method","html_id":"delete(job_id:Int64?)-instance-method","name":"delete","doc":"Deletes a job from Beanstalk based on the job id. Returns true upon\nsuccessful completion. Raises an exception if the job id is invalid.","summary":"<p>Deletes a job from Beanstalk based on the job id.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int64 | ::Nil"}],"args_string":"(job_id : Int64?)","args_html":"(job_id : Int64?)","location":{"filename":"src/beanstalk/tube.cr","line_number":108,"url":null},"def":{"name":"delete","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if job_id.nil?\n  raise(Beanstalk::Exception.new(\"Job has no id and therefore cannot be deleted.\"))\nend\nLog.debug do\n  \"Requesting deletion of job id #{job_id}.\"\nend\nconnection.send(nil, \"delete\", job_id)\nresponse = String.new(connection.receive)\nif !(response.starts_with?(\"DELETED\"))\n  Log.error do\n    \"Failed to delete Beanstalk job id #{job_id}. Response: #{response}\"\n  end\n  raise(Beanstalk::Exception.new(\"Job delete failed as server was unable to find it.\"))\nend\ntrue\n"}},{"id":"delete(job:Job)-instance-method","html_id":"delete(job:Job)-instance-method","name":"delete","doc":"Deletes a Job from Beanstalk. Note the Job passed in *must* have an id\nor an exception will be raised. Returns true upon successful completion.","summary":"<p>Deletes a Job from Beanstalk.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"args_string":"(job : Job)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":122,"url":null},"def":{"name":"delete","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"delete(job.id)"}},{"id":"delete?(job:Job)-instance-method","html_id":"delete?(job:Job)-instance-method","name":"delete?","doc":"Attempts to delete the Job passed in. If the Job has no id then the\nmethod simply returns false, otherwise it makes a call to delete()\nusing the specified job.","summary":"<p>Attempts to delete the Job passed in.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"args_string":"(job : Job)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":129,"url":null},"def":{"name":"delete?","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"job.id.nil? ? false : delete(job.id)"}},{"id":"empty!-instance-method","html_id":"empty!-instance-method","name":"empty!","doc":"This method will reserve and delete every job that it can from a Tube and\nwill not return until it tries to reserve a job and receives nil back.\nThis method returns the number of jobs deleted from the queue.","summary":"<p>This method will reserve and delete every job that it can from a Tube and will not return until it tries to reserve a job and receives nil back.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":136,"url":null},"def":{"name":"empty!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.warn do\n  \"WARNING: The '#{using}' queue is being emptied.\"\nend\ntotal = 0\nwhile job = reserve?\n  Log.debug do\n    \"Deleting job id '#{job.id}' from the '#{using}' queue.\"\n  end\n  delete(job)\n  total = total + 1\nend\ntotal\n"}},{"id":"ignore(name:String)-instance-method","html_id":"ignore(name:String)-instance-method","name":"ignore","doc":"This method instructs a Tube to stop watching a named queue for content.","summary":"<p>This method instructs a Tube to stop watching a named queue for content.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/beanstalk/tube.cr","line_number":148,"url":null},"def":{"name":"ignore","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @watching.includes?(name)\n  if @watching.size == 1\n    Log.error do\n      \"Attempt made to remove tube's only remaining watched queue.\"\n    end\n    raise(Beanstalk::Exception.new(\"Unable to ignore the '#{name}' queue as it is the only remaining one being watched.\"))\n  end\n  Log.debug do\n    \"Ignoring the '#{name}' queue.\"\n  end\n  connection.send(nil, \"ignore #{name}\")\n  response = String.new(connection.receive)\n  if !(response.starts_with?(\"WATCHING\"))\n    Log.error do\n      \"Failed to ignore the '#{name}' queue. Response:\\n#{response}\"\n    end\n    raise(Beanstalk::Exception.new(\"Failed to ignore the '#{name}' queue.\"))\n  end\n  @watching.delete(name)\nend\ntrue\n"}},{"id":"kick(maximum:UInt32)-instance-method","html_id":"kick(maximum:UInt32)-instance-method","name":"kick","doc":"This method instructs the server to kick buried jobs to the ready queue.\nNo more than maximum jobs will be kicked by the server. If you specify\na maximum of zero then the method will automatical assume a maximum of\none. If successful the method returns the actual number of jobs that\nwere kicked.","summary":"<p>This method instructs the server to kick buried jobs to the ready queue.</p>","abstract":false,"args":[{"name":"maximum","doc":null,"default_value":"","external_name":"maximum","restriction":"UInt32"}],"args_string":"(maximum : UInt32)","args_html":"(maximum : UInt32)","location":{"filename":"src/beanstalk/tube.cr","line_number":77,"url":null},"def":{"name":"kick","args":[{"name":"maximum","doc":null,"default_value":"","external_name":"maximum","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if maximum == 0\n  maximum = 1\nend\nLog.debug do\n  \"Instructing the server to kick at most #{maximum} buried jobs to the ready state for the #{using} queue.\"\nend\nconnection.send(nil, \"kick\", maximum)\nresponse = String.new(connection.receive)\nif !(response.starts_with?(\"KICKED\"))\n  Log.error do\n    \"Failed to kick jobs for the #{using} queue. Response:\\n#{response}\"\n  end\n  raise(Beanstalk::Exception.new(\"Failed to kick jobs for the #{using} queue.\"))\nend\n(response.chomp.split(\" \"))[1].to_u32\n"}},{"id":"kick_job(job:Job)-instance-method","html_id":"kick_job(job:Job)-instance-method","name":"kick_job","doc":"This method instructs the server to kick a specific job from the buried\nstate (if it is buried) to the ready state. The method returns a boolean\nto indicate whether the kick request was successful.","summary":"<p>This method instructs the server to kick a specific job from the buried state (if it is buried) to the ready state.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"args_string":"(job : Job)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":101,"url":null},"def":{"name":"kick_job","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if job.id.nil?\n  raise(Beanstalk::Exception.new(\"Job has no id and therefore cannot be kicked.\"))\nend\nkick_job(job.id)\n"}},{"id":"kick_job(job_id)-instance-method","html_id":"kick_job(job_id)-instance-method","name":"kick_job","doc":"This method instructs the server to kick a specific job from the buried\nstate (if it is buried) to the ready state. The method returns a boolean\nto indicate whether the kick request was successful.","summary":"<p>This method instructs the server to kick a specific job from the buried state (if it is buried) to the ready state.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"args_string":"(job_id)","args_html":"(job_id)","location":{"filename":"src/beanstalk/tube.cr","line_number":92,"url":null},"def":{"name":"kick_job","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Attempting to kick job id #{job_id}.\"\nend\nconnection.send(nil, \"kick-job\", job_id)\n(String.new(connection.receive)).starts_with?(\"KICKED\")\n"}},{"id":"peek(state:JobState)-instance-method","html_id":"peek(state:JobState)-instance-method","name":"peek","doc":"Fetches details for a job, if one is available, without actually reserving\nit. Note that you must stipulate the state of the job you would like to\npeek at.","summary":"<p>Fetches details for a job, if one is available, without actually reserving it.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"JobState"}],"args_string":"(state : JobState)","args_html":"(state : <a href=\"../Beanstalk/Tube/JobState.html\">JobState</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":171,"url":null},"def":{"name":"peek","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"JobState"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Peeking at the #{state} state jobs using a watch list of - #{watching.join(\", \")}\"\nend\nconnection.send(nil, \"peek-#{state.to_s.downcase}\")\nhandle_job_response(connection.receive_job)\n"}},{"id":"put(job:Job,settings:Job::Settings?=nil)-instance-method","html_id":"put(job:Job,settings:Job::Settings?=nil)-instance-method","name":"put","doc":"This method puts a Job into the queue currently being used by the\nTube.","summary":"<p>This method puts a Job into the queue currently being used by the Tube.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"args_string":"(job : Job, settings : Job::Settings? = <span class=\"n\">nil</span>)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>, settings : <a href=\"../Beanstalk/Job/Settings.html\">Job::Settings</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":179,"url":null},"def":{"name":"put","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if settings.nil?\n  settings = Job::Settings.new\nend\nbytes = job.bytes\nLog.debug do\n  \"Adding a job to a tube using the '#{using}' queue.\"\nend\nconnection.send(bytes, \"put\", settings.priority, settings.delay, settings.time_to_run, bytes.size)\nresponse = String.new(connection.receive)\nparts = response.chomp.split(\" \")\noutcome = parts[0]\nif parts.size > 1\n  job_id = parts[1].to_i64\nend\nif (!outcome) == \"INSERTED\"\n  message = \"\"\n  case outcome\n  when \"BURIED\"\n    message = \"Server is out of memory to grow priority queue, buried response returned.\"\n  when \"JOB_TOO_BIG\"\n    message = \"Job was larger than permitted maximum job size in bytes.\"\n  when \"DRAINING\"\n    message = \"The Beanstalk server is in draining mode and not accepting new jobs.\"\n  else\n    message = \"An unexpected error occurred sending a job to the Beanstalk server.\"\n  end\n  Log.error do\n    \"Error putting Beanstalk job. #{message}. Response:\\n#{response}\"\n  end\n  raise(Beanstalk::Exception.new(message))\nend\nLog.debug do\n  \"Job added to the #{@using} Beanstalk queue with an id of #{job_id}.\"\nend\njob.id = job_id\n"}},{"id":"release(job_id:Int|String,settings:Job::Settings?=nil)-instance-method","html_id":"release(job_id:Int|String,settings:Job::Settings?=nil)-instance-method","name":"release","doc":"This method releases a Job that had previously been reserved, returning it\nto the ready list and making it available to be reserved again. Note that,\nif job settings are specified, only the priority and delay are set when\nthe job is released.","summary":"<p>This method releases a Job that had previously been reserved, returning it to the ready list and making it available to be reserved again.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"args_string":"(job_id : Int | String, settings : Job::Settings? = <span class=\"n\">nil</span>)","args_html":"(job_id : Int | String, settings : <a href=\"../Beanstalk/Job/Settings.html\">Job::Settings</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":212,"url":null},"def":{"name":"release","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if job_id.is_a?(String)\n  begin\n    job_id = job_id.to_i64\n  rescue\n    raise(Beanstalk::Exception.new(\"Invalid job id '#{job_id}' specified in call to release.\"))\n  end\nend\nif settings.nil?\n  settings = Job::Settings.new\nend\nLog.debug do\n  \"Requesting release of job id #{job_id} (Priority: #{settings.priority}, Delay: #{settings.delay}).\"\nend\nconnection.send(nil, \"release\", job_id, settings.priority, settings.delay)\nresponse = (String.new(connection.receive)).chomp\nif response != \"RELEASED\"\n  message = \"\"\n  case response\n  when \"BURIED\"\n    message = \"Server is out of memory to grow priority queue, buried response returned.\"\n  else\n    message = \"Unable to release job id #{job_id} as the job was not found.\"\n  end\n  Log.error do\n    \"Release job id #{job_id} filed. #{message}. Response:\\n#{response}\"\n  end\n  raise(Beanstalk::Exception.new(message))\nend\ntrue\n"}},{"id":"release(job:Job,settings:Job::Settings?=nil)-instance-method","html_id":"release(job:Job,settings:Job::Settings?=nil)-instance-method","name":"release","doc":"This method releases a Job that had previously been reserved, returning it\nto the ready list and making it available to be reserved again. Note that,\nif job settings are specified, only the priority and delay are set when\nthe job is released.","summary":"<p>This method releases a Job that had previously been reserved, returning it to the ready list and making it available to be reserved again.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"args_string":"(job : Job, settings : Job::Settings? = <span class=\"n\">nil</span>)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>, settings : <a href=\"../Beanstalk/Job/Settings.html\">Job::Settings</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/beanstalk/tube.cr","line_number":244,"url":null},"def":{"name":"release","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"},{"name":"settings","doc":null,"default_value":"nil","external_name":"settings","restriction":"Job::Settings | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"job_id = job.id\nif job_id.is_a?(Nil)\n  raise(Beanstalk::Exception.new(\"Job has no id and cannot be released.\"))\nelse\n  release(job_id, settings)\nend\n"}},{"id":"reserve(time_out:Time::Span):Job?-instance-method","html_id":"reserve(time_out:Time::Span):Job?-instance-method","name":"reserve","doc":"Attempts to reserve a Job from a Tube. Takes an optional time_out parameter\nthe indicates the mimimum number of seconds to wait for a Job to become\navailable before giving up and returning nil.","summary":"<p>Attempts to reserve a Job from a Tube.</p>","abstract":false,"args":[{"name":"time_out","doc":null,"default_value":"","external_name":"time_out","restriction":"Time::Span"}],"args_string":"(time_out : Time::Span) : Job?","args_html":"(time_out : Time::Span) : <a href=\"../Beanstalk/Job.html\">Job</a>?","location":{"filename":"src/beanstalk/tube.cr","line_number":285,"url":null},"def":{"name":"reserve","args":[{"name":"time_out","doc":null,"default_value":"","external_name":"time_out","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Job | Nil","visibility":"Public","body":"Log.debug do\n  \"Reserving job from a tube with a time out of #{time_out.total_seconds.to_i} and a watch list of #{watching.join(\", \")}.\"\nend\nconnection.send(nil, \"reserve-with-timeout #{time_out.total_seconds.to_i}\")\nhandle_job_response(connection.receive_job)\n"}},{"id":"reserve(job_id)-instance-method","html_id":"reserve(job_id)-instance-method","name":"reserve","doc":"Reserves a job from a Tube based on it's id. This method will raises\nan exception if the Job could not be found.","summary":"<p>Reserves a job from a Tube based on it's id.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"args_string":"(job_id)","args_html":"(job_id)","location":{"filename":"src/beanstalk/tube.cr","line_number":255,"url":null},"def":{"name":"reserve","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"job = reserve?(job_id)\nif job.nil?\n  raise(Beanstalk::Exception.new(\"Unable to locate a job with an id of #{job_id}.\"))\nend\njob\n"}},{"id":"reserve:Job-instance-method","html_id":"reserve:Job-instance-method","name":"reserve","doc":"Attempts to reserve a job from a Tube, blocking until one becomes\navailable.","summary":"<p>Attempts to reserve a job from a Tube, blocking until one becomes available.</p>","abstract":false,"args":[],"args_string":" : Job","args_html":" : <a href=\"../Beanstalk/Job.html\">Job</a>","location":{"filename":"src/beanstalk/tube.cr","line_number":271,"url":null},"def":{"name":"reserve","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Job","visibility":"Public","body":"Log.debug do\n  \"Reserving job from a tube, with blocking and a watch list of #{watching.join(\", \")}\"\nend\nconnection.send(nil, \"reserve\")\njob = handle_job_response(connection.receive_job)\nif job.is_a?(Nil)\n  raise(Beanstalk::Exception.new(\"Error reserving job from tube.\"))\nelse\n  job\nend\n"}},{"id":"reserve?(job_id):Job?-instance-method","html_id":"reserve?(job_id):Job?-instance-method","name":"reserve?","doc":"Reserves a job from a Tube based on it's id. This method will return\nnil if the Job could not be found.","summary":"<p>Reserves a job from a Tube based on it's id.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"args_string":"(job_id) : Job?","args_html":"(job_id) : <a href=\"../Beanstalk/Job.html\">Job</a>?","location":{"filename":"src/beanstalk/tube.cr","line_number":263,"url":null},"def":{"name":"reserve?","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Job | ::Nil","visibility":"Public","body":"Log.debug do\n  \"Reserving job id #{job_id} from a tube with a watch list of #{watching.join(\", \")}\"\nend\nconnection.send(nil, \"reserve-job\", job_id)\nhandle_job_response(connection.receive_job)\n"}},{"id":"reserve?-instance-method","html_id":"reserve?-instance-method","name":"reserve?","doc":"This method is equivalent to calling the reserve method with a time out\nof zero. It should return immediately with either a Job or nil.","summary":"<p>This method is equivalent to calling the reserve method with a time out of zero.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":293,"url":null},"def":{"name":"reserve?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"reserve(Time::Span.new(seconds: 0))"}},{"id":"stats(job_id:Int|String)-instance-method","html_id":"stats(job_id:Int|String)-instance-method","name":"stats","doc":"This method fetches information relating to a specific job.","summary":"<p>This method fetches information relating to a specific job.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"}],"args_string":"(job_id : Int | String)","args_html":"(job_id : Int | String)","location":{"filename":"src/beanstalk/tube.cr","line_number":305,"url":null},"def":{"name":"stats","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Attempting to fetch stats for job id #{job_id}.\"\nend\nconnection.send(nil, \"stats-job\", job_id)\nconnection.receive_stats\n"}},{"id":"stats(job:Job)-instance-method","html_id":"stats(job:Job)-instance-method","name":"stats","doc":"This method fetches information relating to a specific job.","summary":"<p>This method fetches information relating to a specific job.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"args_string":"(job : Job)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":312,"url":null},"def":{"name":"stats","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"job_id = job.id\nif job_id.is_a?(Nil)\n  raise(Beanstalk::Exception.new(\"Job has no id so stats cannot be fetched for it.\"))\nelse\n  stats(job_id)\nend\n"}},{"id":"stats-instance-method","html_id":"stats-instance-method","name":"stats","doc":"This method fetches stats for the queue being used by a tube.","summary":"<p>This method fetches stats for the queue being used by a tube.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":298,"url":null},"def":{"name":"stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.debug do\n  \"Attempting to fetch stats for the '#{using}' queue.\"\nend\nconnection.send(nil, \"stats-tube\", using)\nconnection.receive_stats\n"}},{"id":"touch(job_id:Int|String)-instance-method","html_id":"touch(job_id:Int|String)-instance-method","name":"touch","doc":"Touches the specified job, extending it's current time to run.","summary":"<p>Touches the specified job, extending it's current time to run.</p>","abstract":false,"args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"}],"args_string":"(job_id : Int | String)","args_html":"(job_id : Int | String)","location":{"filename":"src/beanstalk/tube.cr","line_number":322,"url":null},"def":{"name":"touch","args":[{"name":"job_id","doc":null,"default_value":"","external_name":"job_id","restriction":"Int | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if job_id.is_a?(String)\n  begin\n    job_id = job_id.to_i64\n  rescue\n    raise(Beanstalk::Exception.new(\"Invalid job id '#{job_id}' specified in call to touch job.\"))\n  end\nend\nLog.debug do\n  \"Attempting to touch job id #{job_id} in the '#{using}' queue.\"\nend\nconnection.send(nil, \"touch\", job_id)\nresponse = String.new(connection.receive)\nif !(response.starts_with?(\"TOUCHED\"))\n  Log.error do\n    \"Failed to touch job id #{job_id}. Response: #{response}\"\n  end\n  raise(Beanstalk::Exception.new(\"Failed to touch job id #{job_id}.\"))\nend\ntrue\n"}},{"id":"touch(job:Job)-instance-method","html_id":"touch(job:Job)-instance-method","name":"touch","doc":"Touches the specified job, extending it's current time to run.","summary":"<p>Touches the specified job, extending it's current time to run.</p>","abstract":false,"args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"args_string":"(job : Job)","args_html":"(job : <a href=\"../Beanstalk/Job.html\">Job</a>)","location":{"filename":"src/beanstalk/tube.cr","line_number":342,"url":null},"def":{"name":"touch","args":[{"name":"job","doc":null,"default_value":"","external_name":"job","restriction":"Job"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"job_id = job.id\nif job_id.is_a?(Nil)\n  raise(Beanstalk::Exception.new(\"Job has no id and therefore cannot be touched.\"))\nelse\n  touch(job_id)\nend\n"}},{"id":"use(name:String)-instance-method","html_id":"use(name:String)-instance-method","name":"use","doc":"Instructs a Tube to use a given queue name, supplanting the previously\nused name. The queue name provided must be valid.","summary":"<p>Instructs a Tube to use a given queue name, supplanting the previously used name.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/beanstalk/tube.cr","line_number":353,"url":null},"def":{"name":"use","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"validate_tube_name!(name)\nLog.debug do\n  \"Setting the '#{name}' queue as the one to be used for jobs.\"\nend\nconnection.send(nil, \"use\", name)\nresponse = String.new(connection.receive)\nif !(response.chomp.starts_with?(\"USING\"))\n  message = \"Failed to switch tube to using '#{name}'.\"\n  Log.error do\n    \"#{message} Server Response:\\n'#{response}'\"\n  end\n  raise(Beanstalk::Exception.new(message))\nend\n@using = (response.chomp.split(\" \"))[1]\n"}},{"id":"using:String-instance-method","html_id":"using:String-instance-method","name":"using","doc":"Retrieves the name of the queue the Tube is using.","summary":"<p>Retrieves the name of the queue the Tube is using.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/beanstalk/tube.cr","line_number":27,"url":null},"def":{"name":"using","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@using"}},{"id":"watch(name:String)-instance-method","html_id":"watch(name:String)-instance-method","name":"watch","doc":"Instructs a tube to watch a named queue for content. If the named queue\ndoes not exist it will be created.","summary":"<p>Instructs a tube to watch a named queue for content.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/beanstalk/tube.cr","line_number":369,"url":null},"def":{"name":"watch","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !(@watching.includes?(name))\n  validate_tube_name!(name)\n  Log.debug do\n    \"Adding the '#{name}' queue to the watching list.\"\n  end\n  connection.send(nil, \"watch #{name}\")\n  response = String.new(connection.receive)\n  if !(response.starts_with?(\"WATCHING\"))\n    Log.error do\n      \"Failed to watch the '#{name}' queue.\"\n    end\n    raise(Beanstalk::Exception.new(\"Failed to watch the '#{name}' queue.\"))\n  end\n  @watching << name\nend\ntrue\n"}},{"id":"watching:Array(String)-instance-method","html_id":"watching:Array(String)-instance-method","name":"watching","doc":"Retrieves an array of the names of the queues the Tube is watching.","summary":"<p>Retrieves an array of the names of the queues the Tube is watching.</p>","abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : Array(String)","location":{"filename":"src/beanstalk/tube.cr","line_number":30,"url":null},"def":{"name":"watching","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@watching"}}],"macros":[],"types":[{"html_id":"beanstalk-cr/Beanstalk/Tube/JobState","path":"Beanstalk/Tube/JobState.html","kind":"enum","full_name":"Beanstalk::Tube::JobState","name":"JobState","abstract":false,"superclass":null,"ancestors":[{"html_id":"beanstalk-cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"beanstalk-cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"beanstalk-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"beanstalk-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"beanstalk-cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Buried","name":"Buried","value":"0","doc":null,"summary":null},{"id":"Delayed","name":"Delayed","value":"1","doc":null,"summary":null},{"id":"Ready","name":"Ready","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"beanstalk-cr/Beanstalk/Tube","kind":"class","full_name":"Beanstalk::Tube","name":"Tube"},"doc":"An enumeration of the various job states.","summary":"<p>An enumeration of the various job states.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"buried?-instance-method","html_id":"buried?-instance-method","name":"buried?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":18,"url":null},"def":{"name":"buried?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Buried"}},{"id":"delayed?-instance-method","html_id":"delayed?-instance-method","name":"delayed?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":19,"url":null},"def":{"name":"delayed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Delayed"}},{"id":"ready?-instance-method","html_id":"ready?-instance-method","name":"ready?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/beanstalk/tube.cr","line_number":20,"url":null},"def":{"name":"ready?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Ready"}}],"macros":[],"types":[]}]}]}]}}